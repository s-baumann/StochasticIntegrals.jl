var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = StochasticIntegrals","category":"page"},{"location":"api/#Internal-Functions","page":"API","title":"Internal Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Main-Structs","page":"API","title":"Main Structs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ItoIntegral\nItoSet\nStochasticIntegralsCovariance\nForwardCovariance\nSimpleCovariance","category":"page"},{"location":"api/#StochasticIntegrals.ItoIntegral","page":"API","title":"StochasticIntegrals.ItoIntegral","text":"ItoIntegral A struct detailing an ito integral. It contains a UnivariateFunction detailing the integrand as well as a symbol detailing an id of the integral's processes.\n\nUsual (and most general) contructor is:     ItoIntegral(brownianid::Symbol, f::UnivariateFunction) Convenience constructor for ItoIntegrals where the integrand is a flat function is:     ItoIntegral(brownianid::Symbol, variance::Real)\n\n\n\n\n\n","category":"type"},{"location":"api/#StochasticIntegrals.ItoSet","page":"API","title":"StochasticIntegrals.ItoSet","text":"ItoSet\n\nCreates an ItoSet. This contains :\n\nA correlation matrix of brownian motions.\nA vector giving the axis labels for this correlation matrix.\nA dict of ItoInterals. Here the keys should be ids for the ito integrals and the values should be ItoIntegrals.\n\nDetermine which Brownian processes are used in an array of ItoIntegrals.\n\n\n\n\n\n","category":"type"},{"location":"api/#StochasticIntegrals.StochasticIntegralsCovariance","page":"API","title":"StochasticIntegrals.StochasticIntegralsCovariance","text":"StochasticIntegralsCovariance\n\nThis is an abstract type which represents structs that represent covariances over spans of time. The concrete instances of this type should support extracting correlations, covariances, volatilities and random number generation.\n\n\n\n\n\n","category":"type"},{"location":"api/#StochasticIntegrals.ForwardCovariance","page":"API","title":"StochasticIntegrals.ForwardCovariance","text":"ForwardCovariance\n\nCreates an ForwardCovariance struct. This contains :\n\nAn Itoset\nTime From\nTime To\n\nAnd in the constructor the following items are generated and stored in the object:\n\nA covariance matrix\nLabels for the covariance matrix.\nThe cholesky decomposition of the covariance matrix.\nThe inverse of the covariance matrix.\nThe determinant of the covariance matrix.\n\nThe constructors are:     ForwardCovariance(itoset::ItoSet, from::Real, to::Real;          calculatechol::Bool = true, calculateinverse::Bool = true, calculatedeterminant::Bool = true)     ForwardCovariance(itoset::ItoSet, from::Union{Date,DateTime}, to::Union{Date,DateTime})     ForwardCovariance(oldForwardCovariance::ForwardCovariance, from::Real, to::Real)     ForwardCovariance(old_ForwardCovariance::ForwardCovariance, from::Union{Date,DateTime}, to::Union{Date,DateTime})\n\n\n\n\n\n","category":"type"},{"location":"api/#StochasticIntegrals.SimpleCovariance","page":"API","title":"StochasticIntegrals.SimpleCovariance","text":"SimpleCovariance\n\nCreates an SimpleCovariance struct. This is a simplified version of ForwardCovariance and is designed for Ito Integrals that are constant (so correlations do not need to be recalculated). This computational saving is the only advantage - ForwardCovariance is more general. It contains the same elements as a ForwardCovariance:\n\nAn Itoset\nTime From\nTime To\n\nAnd in the constructor the following items are generated and stored in the object:\n\nA covariance matrix\nLabels for the covariance matrix.\nThe cholesky decomposition of the covariance matrix.\nThe inverse of the covariance matrix.\nThe determinant of the covariance matrix.\n\nThe constructors are:     SimpleCovariance(itoset::ItoSet, from::Real, to::Real;          calculatechol::Bool = true, calculateinverse::Bool = true, calculate_determinant::Bool = true)\n\n\n\n\n\n","category":"type"},{"location":"api/#Random-Number-Generation","page":"API","title":"Random Number Generation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"NumberGenerator\nMersenne\nSobolGen\nnext!\nget_draws\nget_zero_draws","category":"page"},{"location":"api/#StochasticIntegrals.NumberGenerator","page":"API","title":"StochasticIntegrals.NumberGenerator","text":"A NumberGenerator must always return a vector of uniforms when called with the function next!(::NumberGenerator).\nIt can contain whatever it wants as long as it does that method.\n\n\n\n\n\n","category":"type"},{"location":"api/#StochasticIntegrals.Mersenne","page":"API","title":"StochasticIntegrals.Mersenne","text":"A NumberGenerator wrapper for MersenneTwister. This makes pseudorandom numbers.\n\n\n\n\n\n","category":"type"},{"location":"api/#StochasticIntegrals.SobolGen","page":"API","title":"StochasticIntegrals.SobolGen","text":"A NumberGenerator wrapper for SobolSeq. This makes quasirandom numbers\n\n\n\n\n\n","category":"type"},{"location":"api/#Sobol.next!","page":"API","title":"Sobol.next!","text":"next!(number_generator::NumberGenerator)\n\nThis extracts a random draw given a number generator struct (like a SobolGen or a Mersenne).\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.get_draws","page":"API","title":"StochasticIntegrals.get_draws","text":"get_draws(covar::ForwardCovariance; uniform_draw::Array{T,1} = rand(length(covar.covariance_labels_))) where T<:Real\nget_draws(covar::ForwardCovariance, num::Integer; twister::MersenneTwister = MersenneTwister(1234), antithetic_variates = false)\n\nget pseudorandom draws from a ForwardCovariance struct. Other schemes (like quasirandom) can be done by inserting quasirandom numbers in as the uniformdraw. If the antitheticvariates control is set to true then every second set of draws will be antithetic to the previous.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.get_zero_draws","page":"API","title":"StochasticIntegrals.get_zero_draws","text":"get_zero_draws(covar::ForwardCovariance)\n\nget a draw of zero for all ito_integrals. May be handy for bug hunting.\n\n\n\n\n\nget_zero_draws(covar::ForwardCovariance, num::Integer)\n\nget an array of zero draws for all ito_integrals. May be handy for bug hunting.\n\n\n\n\n\n","category":"function"},{"location":"api/#Ito-Processes","page":"API","title":"Ito Processes","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ItoProcess\nevolve\nevolve_covar_and_ito_processes\nmake_ito_process_syncronous_time_series\nmake_ito_process_non_syncronous_time_series","category":"page"},{"location":"api/#Helper-Functions","page":"API","title":"Helper Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"volatility\nvariance\ncovariance\ncorrelation\npdf\nmake_covariance_matrix\nlog_likelihood\nbrownians_in_use\nupdate!","category":"page"},{"location":"api/#StochasticIntegrals.volatility","page":"API","title":"StochasticIntegrals.volatility","text":"volatility(ito::ItoIntegral, on::Union{Date,DateTime})\n\nGet the volatility of an ItoIntegral on a certain date.\n\n\n\n\n\nvolatility(ito::ItoSet, index::Integer, on::Union{Date,DateTime})\nvolatility(ito::ItoSet, ito_integral_id::Symbol, on::Union{Date,DateTime})\n\nGet volatility of an ito_integral on a date.\n\n\n\n\n\nvolatility(covar::ForwardCovariance, index::Integer, on::Union{Date,DateTime})\nvolatility(covar::ForwardCovariance, id::Symbol, on::Union{Date,DateTime})\n\nGet the volatility of an ItoIntegral on a date..\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.variance","page":"API","title":"StochasticIntegrals.variance","text":"variance(ito::ItoIntegral, from::Real, to::Real)\nvariance(ito::ItoIntegral, base::Union{Date,DateTime}, from::Union{Date,DateTime}, to::Union{Date,DateTime})\n\nGet the variance of an ItoIntegral from one point of time to another.\n\n\n\n\n\nvariance(covar::ForwardCovariance, id::Symbol)\nvariance(covar::ForwardCovariance, index::Integer)\n\nGet the variance of an ItoIntegral over a period.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.covariance","page":"API","title":"StochasticIntegrals.covariance","text":"covariance(ito1::ItoIntegral,ito2::ItoIntegral, from::Real, to::Real, gaussian_correlation::Real)\ncovariance(ito1::ItoIntegral,ito2::ItoIntegral, base::Union{Date,DateTime}, from::Union{Date,DateTime}, to::Union{Date,DateTime}, gaussian_correlation::Real)\n\nGet the covariance of two ItoIntegrals over a certain period given the underlying Brownian processes have a correlation of gaussian_correlation.\n\n\n\n\n\ncovariance(covar::ForwardCovariance, index_1::Integer, index_2::Integer)\ncovariance(covar::ForwardCovariance, id1::Symbol, id2::Symbol)\n\nGet the covariance of two ItoIntegrals over a period.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.correlation","page":"API","title":"StochasticIntegrals.correlation","text":"correlation(ito::ItoSet, index1::Integer, index2::Integer)\ncorrelation(ito::ItoSet, brownian_id1::Symbol, brownian_id2::Symbol)\n\nGet correlation between brownian motions in an ItoSet.\n\n\n\n\n\ncorrelation(covar::ForwardCovariance, index_1::Integer, index_2::Integer)\ncorrelation(covar::ForwardCovariance, id1::Symbol, id2::Symbol)\n\nGet the correlation of two ItoIntegrals over a period.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.pdf","page":"API","title":"StochasticIntegrals.pdf","text":"pdf(covar::ForwardCovariance, coordinates::Dict{Symbol,Real})\n\nget the value of the pdf at some coordinates.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.make_covariance_matrix","page":"API","title":"StochasticIntegrals.make_covariance_matrix","text":"make_covariance_matrix(ito_set_::ItoSet, from::Real, to::Real)\n\nMake a covariance matrix given an ItoSet and a period of time. This returns a Hermitian covariance matrix as well as a vector of symbols representing the axis labelling on this Hermitian.\n\nInputs\n\nito_set_ - An ItoSet you want to make a covariance matrix from.\nfrom - The (numeric) time from which the covariance span starts.\nto - The (numeric) time at which the covariance span ends.\n\nReturns\n\nA Hermitian covariance matrix.\nA Vector{Symbol} of labels for the covariance matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.log_likelihood","page":"API","title":"StochasticIntegrals.log_likelihood","text":"log_likelihood(covar::ForwardCovariance, coordinates::Dict{Symbol,Real})\n\nget the log likelihood at some coordinates.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.brownians_in_use","page":"API","title":"StochasticIntegrals.brownians_in_use","text":"brownians_in_use(itos::Array{ItoIntegral,1}, brownians::Array{Symbol,1})\n\nDetermine which Browninan processes are used in an array of ItoIntegrals.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.update!","page":"API","title":"StochasticIntegrals.update!","text":"update!(sc::SimpleCovariance, from::Real, to::Real)\n\nThis takes a SimpleCovariance and updates it for a new  span in time. The new span in time is between from and to. For SimpleCovariance this is done by just adjusting the covariances for the new time span (with corresponding adjustments) to the cholesky, inverse, etc.\n\nThe corresponding technique for a ForwardCovariance (which is also a StochasticIntegralsCovariance) is to feed it into a new ForwardCovariance constructor which will recalculate for the new span.\n\n\n\n\n\n","category":"function"},{"location":"api/#Internal-Functions-2","page":"API","title":"Internal Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"to_draws\nto_dataframe\nto_array\nget_confidence_hypercube\ngenerate_conditioned_distribution","category":"page"},{"location":"api/#StochasticIntegrals.to_draws","page":"API","title":"StochasticIntegrals.to_draws","text":"to_draws(X::Array{T,2}; labels::Array{Symbol,1} = Symbol.(\"x\", 1:size(X)[2]))\nto_draws(dd::DataFrame; labels::Array{Symbol,1} =  Symbol.(names(dd)))\n\nConvert array or dataframe to a vector of dicts containing draws.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.to_dataframe","page":"API","title":"StochasticIntegrals.to_dataframe","text":"to_dataframe(X::Array{T,2}; labels::Array{Symbol,1} = Symbol.(\"x\", 1:size(X)[2]))\nto_dataframe(draws::Array{Dict{Symbol,T},1}; labels::Array{Symbol,1}  = collect(keys(draws[1])))\n\nConvert arrys or vectors of dicts to a dataframe.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.to_array","page":"API","title":"StochasticIntegrals.to_array","text":"to_array(draws::Array{Dict{Symbol,T},1}; labels::Array{Symbol,1}  = collect(keys(draws[1]))) where T<:Real\nto_array(dd::DataFrame; labels::Array{Symbol,1} =  Symbol.(names(dd)))\n\nConvert draws or a dataframe to an array and a vector of column labels.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.get_confidence_hypercube","page":"API","title":"StochasticIntegrals.get_confidence_hypercube","text":"get_confidence_hypercube(covar::ForwardCovariance, confidence_level::Real, data::Array{T,2}; tuning_parameter::Real = 1.0)\n\nThis returns the endpoints of a hypercube that contains confidence_level% of the dataset.\n\n\n\n\n\n","category":"function"},{"location":"api/#StochasticIntegrals.generate_conditioned_distribution","page":"API","title":"StochasticIntegrals.generate_conditioned_distribution","text":"generate_conditioned_dist(covar::ForwardCovariance, conditioning_draws::Array{Symbol,T}) where T<:Real\n\nGiven some subset of known stochastic integral values this generates a conditional multivariate normal distribution.\n\n\n\n\n\n","category":"function"},{"location":"#StochasticIntegrals","page":"Index","title":"StochasticIntegrals","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"This generates covariance matrices and Cholesky decompositions for a set of stochastic integrals. At the moment it only supports Ito integrals. Users specify the UnivariateFunction that is the integrand of the Ito integral and a covariance matrix will be made of all such Ito integrals.","category":"page"},{"location":"","page":"Index","title":"Index","text":"There are a large number of convenience functions. This includes finding the variance and instantaneous volatility of an ito integral; for extracting the terminal correlation & covariance of a pair of stochastic integrals over a period of time; for generation of random draws from the set of Ito integrals (either pseudorandom or quasirandom). Given a draw of stochastic integrals, it is also possible to find the density of the multivariate normal distribution at this point. See the testing files for code examples.","category":"page"},{"location":"#Example","page":"Index","title":"Example","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Consider that we have three different stochastic integrals. These are:","category":"page"},{"location":"","page":"Index","title":"Index","text":"$ \\int t^2 dZ $","category":"page"},{"location":"","page":"Index","title":"Index","text":"$ \\int 5t dZ $","category":"page"},{"location":"","page":"Index","title":"Index","text":"$ \\int e^{5 - t} dW $","category":"page"},{"location":"","page":"Index","title":"Index","text":"Where Z and W are Brownian Motions.","category":"page"},{"location":"","page":"Index","title":"Index","text":"We first write the integrands as univariate functions:","category":"page"},{"location":"","page":"Index","title":"Index","text":"using StochasticIntegrals\nusing UnivariateFunctions\nA_integrand = PE_Function(1.0,0.0,0.0,2)\nB_integrand = PE_Function(5.0,0.0,0.0,1)\nC_integrand = PE_Function(1.0,-1.0,5.0,0)","category":"page"},{"location":"","page":"Index","title":"Index","text":"Then we get the correlation matrix of the two Brownian motions that we have. For simplicity lets consider the case that they are uncorrelated. We also specify the labels for these Brownian motions. In this case they will identify that the first row/column of the correlation matrix is for the :Z process and the second is for the :W process.","category":"page"},{"location":"","page":"Index","title":"Index","text":"using LinearAlgebra\nbrownian_correlation_matrix = Hermitian(diagm(0 => ones(2)))\nbrownian_ids = [:Z, :W]","category":"page"},{"location":"","page":"Index","title":"Index","text":"Now we package the integrands of our stochastic integrals together with their corresponding Brownian motion ids to represent an Ito integral. We must also specify a new id for the stochastic integral to ensure that we know what row/column of the covariance matrix we create represents which integral.","category":"page"},{"location":"","page":"Index","title":"Index","text":"A  = ItoIntegral(:Z, A_integrand)\nB  = ItoIntegral(:Z, B_integrand)\nC  = ItoIntegral(:W, C_integrand)\nito_integrals = Dict{Symbol,ItoIntegral}([:A, :B, :C] .=> [A, B, C])","category":"page"},{"location":"","page":"Index","title":"Index","text":"Now we can place the Ito integrals together with the brownian motion correlation matrix to make an ItoSet.","category":"page"},{"location":"","page":"Index","title":"Index","text":"ito_set = ItoSet(brownian_correlation_matrix, brownian_ids, ito_integrals)","category":"page"},{"location":"","page":"Index","title":"Index","text":"In this format we can access the volatility of any of the Ito integrals at any point. We would usually be more interested in the statistical properties of the Ito integrals at a point forward in time. This can be done by generating a ForwardCovariance object. We must first specify the start and end limits on each integral. Below we look at the integrals  between 0.0 and 2.0. More generally time can be specified in Dates format. See testing files for more examples.","category":"page"},{"location":"","page":"Index","title":"Index","text":"covar = ForwardCovariance(ito_set, 0.0, 2.0)","category":"page"},{"location":"","page":"Index","title":"Index","text":"All of the hard work is done inside the above constructor. In particular a covariance matrix is generated as well as its inverse, Cholesky decomposition and determinant. These can be accessed directly in the normal way. Alternatively there are methods that can be called on a covar object to extract a correlation, covariance, variance or volatility using the stochastic integral ids. For instance to get the covariance between integrals A and B:","category":"page"},{"location":"","page":"Index","title":"Index","text":"covariance_of_A_and_B = get_covariance(covar, :A, :B)","category":"page"},{"location":"","page":"Index","title":"Index","text":"It is also possible to generate random numbers using either the get_normal_draws or get_sobol_normal_draws functions. For instance to get 10 pseudorandom realisations of these integrals:","category":"page"},{"location":"","page":"Index","title":"Index","text":"draws = get_normal_draws(covar, 10)","category":"page"},{"location":"","page":"Index","title":"Index","text":"For ascertaining the probability of the integrals jointing reaching some set of values there are the pdf and log_likelihood methods. For instance to find the log likelihood of the first draw we obtained above:","category":"page"},{"location":"","page":"Index","title":"Index","text":"log_likelihood(covar, draws[1])","category":"page"},{"location":"","page":"Index","title":"Index","text":"See the testing files for more code examples.","category":"page"},{"location":"#Data-conversions","page":"Index","title":"Data conversions","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"StochasticIntegrals generates draws from stochastic integrals and places them into an array of dicts. Sometimes it is easier to use data in an array or in a dataframe. The to_draws, to_dataframe and to_array functions are convenience functions that convert datastructures between draws (Array{Dict{Symbol,Float64},1}), dataframes and arrays.","category":"page"}]
}
